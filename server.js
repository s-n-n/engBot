const TelegramBot = require('node-telegram-bot-api');
const cheerio = require('cheerio');
const axios = require('axios');
const moment = require('moment-timezone');

const token = '6391975200:AAEYGhoNzs7W5VyS-v4YZ6pS0uY3WeCk3Ps';
const bot = new TelegramBot(token, { polling: true });

const group = '–í–¢-22-1';
const subgroup = 2; // 1 –∏–ª–∏ 2
const url = `https://rozklad.ztu.edu.ua/schedule/group/${group}`;
const timezone = 'Europe/Kiev';

let messageId;

bot.on('message', async (msg) => {
    update(msg);
});

async function update(msg) {
    const data = await getData();
    // console.log(JSON.stringify(data, null, 2));
    const text = genText(data);
    if(messageId) {
        bot.deleteMessage(msg.chat.id, messageId);
    }
    bot.sendMessage(msg.chat.id, text, { parse_mode: 'HTML' }).then((message) => {
        messageId = message.message_id;
    });
}

function genText(data) {
    let text = `<b>–ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å:</b>\n${moment().tz(timezone).format('YYYY-MM-DD HH:mm:ss')}\n\n`;
    text += `<b>${data.day} (${data.table === 0 ? '–Ü' : '–Ü–Ü'} —Ç–∏–∂–¥–µ–Ω—å)</b>\n`;
    text += `–ì—Ä—É–ø–∞ ${group} ü§ò –ø—ñ–¥–≥—Ä—É–ø–∞ ${subgroup}\n\n`;
    // let n = 0;
    for (const key in data.schedule) {
        const index = data.schedule[key].length > 1 ? subgroup - 1 : 0
        if (data.schedule[key][index].active) {
            // n++;

            // text += `${n < 2 ? '‚ùå ' : ''}`;
            // text += `${n === 2 ? '‚úÖ ' : ''}`;
            // text += `${n > 2 ? 'üî≤ ' : ''}`;

            text += `<b>${key}</b> `;
            // if(n === 2) text += `üïí –ó–∞–ª–∏—à–∏–ª–æ—Å—å 45 —Ö–≤.\n`;
            // else text += `\n`;
            if (data.schedule[key][index].groups) {
                text += `<i>${data.schedule[key][index].groups}</i>\n`;
            }
            if (data.schedule[key][index].subject) {
                text += `<b>${data.schedule[key][index].subject}</b>\n`;
            }
            if (data.schedule[key][index].room_notes || data.schedule[key][index].room) {
                text += `<i>${data.schedule[key][index].room_notes} ${data.schedule[key][index].room}</i>\n`;
            }
            if (data.schedule[key][index].teacher) {
                text += `<b>${data.schedule[key][index].teacher}</b>\n`;
            }
            text += `\n`;
        }
    }
    text += `üëâ <a href="${url}">${url}</a>`;

    return text;
}

async function getData() {
    try {
        const response = await axios.get(url);

        const html = response.data;
        const $ = cheerio.load(html);

        const data = { schedule: {}};

        const tableFirstColumnIndex = $(`table.schedule:eq(0) tbody tr th.selected`).index(); // -1 // –ü–æ–∏—Å–∫ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Å –∫–ª–∞—Å—Å–æ–º "selected" –≤ –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü–µ. (0, 1, ... –∏–ª–∏ -1 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
        const tableSecondColumnIndex = $(`table.schedule:eq(1) tbody tr th.selected`).index(); // 3 // –ü–æ–∏—Å–∫ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ —Å –∫–ª–∞—Å—Å–æ–º "selected" –≤–æ –≤—Ç–æ—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ. (0, 1, ... –∏–ª–∏ -1 –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)
        const tableIndex = tableFirstColumnIndex > tableSecondColumnIndex ? 0 : 1 // –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ html. –£–∑–Ω–∞–µ–º —Å–µ–π—á–∞—Å –ø–µ—Ä–≤–∞—è –∏–ª–∏ –≤—Ç–æ—Ä–∞—è –Ω–µ–¥–µ–ª—è (0 –∏–ª–∏ 1)
        const columnIndex = tableFirstColumnIndex > tableSecondColumnIndex ? tableFirstColumnIndex : tableSecondColumnIndex; // –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ (1, 2, ...)

        data.table = tableIndex;

        const rows = $(`table.schedule:eq(${tableIndex}) tbody tr`); // –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
        rows.each((index, row) => {
            const column = $(row).find(`td:eq(${columnIndex-1})`); // –≤—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
            if (column.text().trim()) { // –µ—Å–ª–∏ —è—á–µ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ –ø—É—Å—Ç–∞—è
                data.day = column.attr('day').replace(/\d/g, '').trim(); // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º day –≤ –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ—á–∏—Å—Ç–∏–≤ –µ–≥–æ –æ—Ç —Ü–∏—Ñ—Ä –∏ –ø—Ä–æ–±–µ–ª–æ–≤

                const one = column.find(`div.variative`); // –æ–±—â–∞—è –ø–∞—Ä–∞ (–æ–¥–∏–Ω –µ–ª–µ–º–µ–Ω—Ç)
                const two = column.find(`div.variative div.subgroups div.one`); // –ø–æ–¥–≥—Ä—É–ø–ø—ã (–¥–≤–∞ –µ–ª–µ–º–µ–Ω—Ç–∞)
                items = two.length ? two : one; // –±–µ—Ä–µ–º –Ω—É–∂–Ω—ã–π —Å–ø–∏—Å–æ–∫

                const arr = [];
                items.each((ind, item) => {
                    arr[ind] = {
                        index: ind + 1,
                        active: $(item).text().trim() ? true : false,
                        groups: $(item).find('div').eq(0).text().trim() || null,
                        subject: $(item).find('div').eq(1).text().trim() || null,
                        room: $(item).find('div').eq(2).find('span.room').text().trim() || null,
                        room_notes: $(item).find('div').eq(2).contents().first().text().trim() || null,
                        teacher: $(item).find('div').eq(3).text().trim() || null,
                    }
                });
                data.schedule[column.attr('hour')] = arr;
            }
        });

        return data;
    } catch (error) {
        console.error(error);
    }
}